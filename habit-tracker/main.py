from kivy.lang import Builder
from kivymd.app import MDApp
from kivy.uix.screenmanager import ScreenManager
from kivy.config import Config
import os
from app import db
import sys

print("üêç Python encoding:", sys.getdefaultencoding())
print("üêç Filesystem encoding:", sys.getfilesystemencoding())

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ screens
from app.screens.habit_list import HabitListScreen
from app.screens.habit_add import HabitAddScreen
from app.screens.habit_stats import HabitStatsScreen
from app.screens.reminders import RemindersScreen
from app.screens.settings import SettingsScreen
from app.screens.habit_edit import HabitEditScreen

Config.set('input', 'mouse', 'mouse,multitouch_on_demand')

# –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î
try:
    db.init_db()
    print("–ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ ‚úÖ")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ë–î: {e}")


class HabitScreenManager(ScreenManager):
    def add_habit(self):
        if "habit_add" in self.screen_names:
            self.current = "habit_add"


class HabitTrackerApp(MDApp):
    def build(self):
        self.theme_cls.primary_palette = "DeepPurple"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º KV —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ kv
        kv_files = [
            "habit_tracker.kv",
            "habit_add.kv",
            "habit_stats.kv",
            "reminders.kv",
            "settings.kv",
            "habit_edit.kv"
        ]

        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É KV —Ñ–∞–π–ª–æ–≤...")

        # –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        loaded_files = []
        for kv_file in kv_files:
            try:
                kv_path = os.path.join("app/kv", kv_file)
                Builder.load_file(kv_path)
                loaded_files.append(kv_file)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {kv_file}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {kv_file}: {e}")

        print(f"üìÅ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ KV —Ñ–∞–π–ª–æ–≤: {len(loaded_files)}")

        # –°–æ–∑–¥–∞–µ–º ScreenManager –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω—ã
        sm = HabitScreenManager()

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω—ã
        screens = [
            ("habit_list", HabitListScreen),
            ("habit_add", HabitAddScreen),
            ("habit_stats", HabitStatsScreen),
            ("reminders", RemindersScreen),
            ("settings", SettingsScreen),
            ("habit_edit", HabitEditScreen)
        ]

        for name, screen_class in screens:
            if not sm.has_screen(name):
                sm.add_widget(screen_class(name=name))
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —ç–∫—Ä–∞–Ω: {name}")

        print("‚úÖ –í—Å–µ —ç–∫—Ä–∞–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return sm

    def on_start(self):
        settings_screen = self.root.get_screen("settings")
        settings_screen.on_enter()

    def back(self):
        if self.root and 'habit_list' in self.root.screen_names:
            self.root.current = 'habit_list'


if __name__ == '__main__':
    HabitTrackerApp().run()