from kivymd.uix.screen import MDScreen
from kivy.properties import BooleanProperty, StringProperty
from kivymd.app import MDApp
from kivy.clock import Clock
from app import db


class SettingsScreen(MDScreen):
    dark_theme = BooleanProperty(False)
    primary_color = StringProperty("#6750A4")
    _content_loaded = BooleanProperty(False)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        print("üîç SettingsScreen —Å–æ–∑–¥–∞–Ω")

    def on_enter(self):
        print("üîç SettingsScreen: on_enter –≤—ã–∑–≤–∞–Ω")

        if not self._content_loaded:
            Clock.schedule_once(lambda dt: self.load_settings(), 0.1)
            self._content_loaded = True

    def on_leave(self):
        pass

    def go_back(self):
        if self.manager and 'habit_list' in self.manager.screen_names:
            self.manager.current = 'habit_list'

    def load_settings(self):
        try:
            settings = db.get_settings()
            if settings:
                self.dark_theme = settings.get('dark_theme', False)
                self.primary_color = settings.get('primary_color', '#6750A4')

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                if hasattr(self, 'ids') and 'theme_switch' in self.ids:
                    self.ids.theme_switch.active = self.dark_theme

            print(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: —Ç–µ–º–∞={'—Ç–µ–º–Ω–∞—è' if self.dark_theme else '—Å–≤–µ—Ç–ª–∞—è'}, —Ü–≤–µ—Ç={self.primary_color}")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            self.apply_theme()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def toggle_dark_theme(self, switch_instance):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
            new_value = switch_instance.active
            print(f"üîß –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã: {new_value}")

            if self.dark_theme != new_value:
                self.dark_theme = new_value
                self.save_settings()
                self.apply_theme()
                print(f"‚úÖ –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ {'–≤–∫–ª—é—á–µ–Ω–∞' if self.dark_theme else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã: {e}")

    def set_primary_color(self, hex_color):
        try:
            if self.primary_color != hex_color:
                self.primary_color = hex_color
                self.save_settings()
                self.apply_theme()
                print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç: {hex_color}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞: {e}")

    def apply_theme(self):
        try:
            app = MDApp.get_running_app()
            if not app:
                return

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≤–µ—Ç–ª—É—é/—Ç–µ–º–Ω—É—é —Ç–µ–º—É
            app.theme_cls.theme_style = "Dark" if self.dark_theme else "Light"

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç
            palette_name = self.get_palette_name(self.primary_color)
            app.theme_cls.primary_palette = palette_name

            print(f"üé® –¢–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {app.theme_cls.theme_style}, –ø–∞–ª–∏—Ç—Ä–∞: {palette_name}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã: {e}")

    def get_palette_name(self, hex_color):
        color_map = {
            "#6750A4": "DeepPurple",
            "#4CAF50": "Green",
            "#2196F3": "Blue",
            "#FF9800": "Orange",
            "#F44336": "Red",
            "#9C27B0": "Purple",
            "#00BCD4": "Cyan",
            "#FF5722": "DeepOrange"
        }
        return color_map.get(hex_color, "DeepPurple")

    def save_settings(self):
        try:
            db.save_settings(
                dark_theme=self.dark_theme,
                primary_color=self.primary_color
            )
            print("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def export_data(self):
        print("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)")

    def import_data(self):
        print("üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)")

    def show_privacy_policy(self):
        print("üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")