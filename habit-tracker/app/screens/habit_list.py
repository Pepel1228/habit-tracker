from kivymd.uix.screen import MDScreen
from kivymd.uix.label import MDLabel
from kivymd.uix.card import MDCard
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.button import MDIconButton, MDRoundFlatIconButton
from datetime import datetime
from app import db


class HabitListScreen(MDScreen):

    def on_enter(self, *args):
        print("üîç HabitListScreen: on_enter –≤—ã–∑–≤–∞–Ω")
        from kivy.clock import Clock
        Clock.schedule_once(lambda dt: self.load_habits(), 0.1)

    def load_habits(self):
        print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫...")
        container = self.ids.get('habit_list')
        if not container:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä habit_list")
            return

        print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏...")
        container.clear_widgets()

        try:
            habits = db.get_habits()
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≤—ã—á–µ–∫ –∏–∑ –ë–î: {len(habits)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
            habits = []

        if not habits:
            lbl = MDLabel(
                text="–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –ù–∞–∂–º–∏—Ç–µ +, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.",
                halign="center",
                size_hint_y=None,
                height="48dp"
            )
            container.add_widget(lbl)
            return

        for habit in habits:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ—Ä–∏–∏
            stats = db.get_habit_stats(habit["id"])

            card = self.create_habit_card(habit, stats)
            container.add_widget(card)

    def create_habit_card(self, habit, stats):
        card = MDCard(
            orientation="vertical",
            padding="16dp",
            size_hint_y=None,
            height="120dp",
            radius=[12],
            ripple_behavior=True,
            elevation=2
        )

        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–µ
        top_box = MDBoxLayout(orientation="horizontal", size_hint_y=0.6)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–ª—å
        info_box = MDBoxLayout(orientation="vertical", size_hint_x=0.8)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
        name_label = MDLabel(
            text=habit["name"],
            halign="left",
            font_style="Subtitle1",
            theme_text_color="Primary",
            size_hint_y=0.6
        )

        # –¶–µ–ª—å –ø—Ä–∏–≤—ã—á–∫–∏
        goal_label = MDLabel(
            text=f"–¶–µ–ª—å: {habit.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
            halign="left",
            font_style="Caption",
            theme_text_color="Secondary",
            size_hint_y=0.4
        )

        info_box.add_widget(name_label)
        info_box.add_widget(goal_label)

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ø—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–µ–∫—Å—Ç–æ–º)
        stats_box = MDBoxLayout(orientation="vertical", size_hint_x=0.2, spacing="2dp")

        # –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
        streak_label = MDLabel(
            text=f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {stats.get('current_streak', 0)}",
            halign="center",
            font_style="Caption",
            theme_text_color="Primary",
            size_hint_y=0.5
        )

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
        total_label = MDLabel(
            text=f"–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è: {stats.get('total_done', 0)}",
            halign="center",
            font_style="Caption",
            theme_text_color="Primary",
            size_hint_y=0.5
        )

        stats_box.add_widget(streak_label)
        stats_box.add_widget(total_label)

        top_box.add_widget(info_box)
        top_box.add_widget(stats_box)

        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        bottom_box = MDBoxLayout(
            orientation="horizontal",
            size_hint_y=0.4,
            spacing="8dp"
        )

        # –ö–Ω–æ–ø–∫–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è" - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime('%Y-%m-%d')
        is_done_today = today in stats.get('last_30_days', [])

        if is_done_today:
            # –ï—Å–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –≥–∞–ª–æ—á–∫–æ–π
            done_button = MDRoundFlatIconButton(
                text="‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è",
                icon="check",
                size_hint_x=0.5,
                on_release=lambda x, hid=habit["id"]: self.show_info_message("–£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è!"),
                text_color=(0.4, 0.4, 0.4, 1),  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç
                line_color=(0.4, 0.4, 0.4, 0.5)  # –°–µ—Ä–∞—è —Ä–∞–º–∫–∞
            )
        else:
            # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            done_button = MDRoundFlatIconButton(
                text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è",
                icon="check",
                size_hint_x=0.5,
                on_release=lambda x, hid=habit["id"]: self.toggle_habit_done(hid),
                text_color=(0.2, 0.7, 0.3, 1),  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
                line_color=(0.2, 0.7, 0.3, 0.5)  # –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞
            )

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        actions_box = MDBoxLayout(
            orientation="horizontal",
            size_hint_x=0.5,
            spacing="4dp"
        )

        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_btn = MDIconButton(
            icon="pencil",
            on_release=lambda x, hid=habit["id"]: self.edit_habit(hid),
            theme_icon_color="Custom",
            icon_color=(0.2, 0.6, 0.8, 1)
        )

        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_btn = MDIconButton(
            icon="chart-line",
            on_release=lambda x, hid=habit["id"]: self.open_stats(hid),
            theme_icon_color="Custom",
            icon_color=(0.3, 0.7, 0.3, 1)
        )

        actions_box.add_widget(edit_btn)
        actions_box.add_widget(stats_btn)

        bottom_box.add_widget(done_button)
        bottom_box.add_widget(actions_box)

        # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        card.add_widget(top_box)
        card.add_widget(bottom_box)

        return card

    def toggle_habit_done(self, habit_id):
        print(f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ {habit_id}")
        try:
            result = db.log_habit_done(habit_id)
            if result:
                print(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ {habit_id} –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫
                from kivy.clock import Clock
                Clock.schedule_once(lambda dt: self.load_habits(), 0.1)
            else:
                print(f"‚ö†Ô∏è –ü—Ä–∏–≤—ã—á–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                from kivy.clock import Clock
                Clock.schedule_once(lambda dt: self.load_habits(), 0.1)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {e}")

    def show_info_message(self, message):
        print(f"‚ÑπÔ∏è {message}")

    def edit_habit(self, habit_id):
        print(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ {habit_id}")
        if self.manager and "habit_edit" in self.manager.screen_names:
            edit_screen = self.manager.get_screen("habit_edit")
            edit_screen.habit_id = habit_id
            self.manager.current = "habit_edit"
            print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
        else:
            print("‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç–∫—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    def open_stats(self, habit_id):
        print(f"üìä –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏ {habit_id}")
        if self.manager and "habit_stats" in self.manager.screen_names:
            stats_screen = self.manager.get_screen("habit_stats")
            stats_screen.habit_id = habit_id
            self.manager.current = "habit_stats"
            print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")
        else:
            print("‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç–∫—Ä–∞–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    def open_settings(self):
        print("‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        if self.manager and "settings" in self.manager.screen_names:
            self.manager.current = "settings"
            print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
        else:
            print("‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    def add_habit(self):
        print("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏")
        if self.manager and "habit_add" in self.manager.screen_names:
            self.manager.current = "habit_add"
            print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–≤—ã—á–∫–∏")
        else:
            print("‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç–∫—Ä–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏")