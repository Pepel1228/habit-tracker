from kivymd.uix.screen import MDScreen
from kivy.properties import BooleanProperty, StringProperty, ListProperty, NumericProperty
from app import db
import json


class RemindersScreen(MDScreen):
    habit_id = NumericProperty(None)
    reminder_enabled = BooleanProperty(False)
    reminder_time = StringProperty("08:00")
    vibration_enabled = BooleanProperty(False)
    sound_enabled = BooleanProperty(True)
    reminder_text = StringProperty("–ù–µ –∑–∞–±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
    repeat_option = StringProperty("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å")
    days_selected = ListProperty([])

    def on_enter(self):
        print(f"üîç RemindersScreen: habit_id = {self.habit_id}")
        if self.habit_id:
            self.load_existing_reminder()
        else:
            print("‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: habit_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def load_existing_reminder(self):
        print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è habit_id={self.habit_id}")

        reminder_data = db.get_reminder(self.habit_id)
        if reminder_data:
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
            self.reminder_time = reminder_data.get('time', '08:00')
            self.repeat_option = reminder_data.get('repeat', 'daily')  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–ª—é—á–∏

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–Ω–∏ (–æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å—Ç—Ä–æ–∫–∏)
            days = reminder_data.get('days', [])
            if isinstance(days, str):
                try:
                    days = json.loads(days)
                except:
                    days = []
            self.days_selected = days

            self.vibration_enabled = bool(reminder_data.get('vibration', False))
            self.sound_enabled = bool(reminder_data.get('sound', True))
            self.reminder_text = reminder_data.get('text', '–ù–µ –∑–∞–±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É')
            self.reminder_enabled = True

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {self.reminder_time}, {self.repeat_option}")

            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.update_ui_from_data()
        else:
            print("‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    def update_ui_from_data(self):
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏
            if 'reminder_time' in self.ids:
                self.ids.reminder_time.text = self.reminder_time

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if 'reminder_enabled' in self.ids:
                self.ids.reminder_enabled.active = self.reminder_enabled

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –≤–∏–±—Ä–∞—Ü–∏–∏ –∏ –∑–≤—É–∫–∞
            if 'vibration_switch' in self.ids:
                self.ids.vibration_switch.active = self.vibration_enabled
            if 'sound_switch' in self.ids:
                self.ids.sound_switch.active = self.sound_enabled

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if 'reminder_text' in self.ids:
                self.ids.reminder_text.text = self.reminder_text

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            self.set_repeat_option(self.repeat_option)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            self.update_days_buttons()

        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ UI: {e}")

    def update_days_buttons(self):
        day_buttons = {
            "Mon": self.ids.day_mon if 'day_mon' in self.ids else None,
            "Tue": self.ids.day_tue if 'day_tue' in self.ids else None,
            "Wed": self.ids.day_wed if 'day_wed' in self.ids else None,
            "Thu": self.ids.day_thu if 'day_thu' in self.ids else None,
            "Fri": self.ids.day_fri if 'day_fri' in self.ids else None,
            "Sat": self.ids.day_sat if 'day_sat' in self.ids else None,
            "Sun": self.ids.day_sun if 'day_sun' in self.ids else None,
        }

        for day_name, button in day_buttons.items():
            if button:
                if day_name in self.days_selected:
                    # –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç
                    button.md_bg_color = self.theme_cls.primary_color
                else:
                    # –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                    button.md_bg_color = (0.5, 0.5, 0.5, 1)

    def go_back(self):
        if self.manager and 'habit_add' in self.manager.screen_names:
            self.manager.current = 'habit_add'

    def toggle_reminder(self, active):
        self.reminder_enabled = bool(active)
        print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if self.reminder_enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")

    def set_time(self, text):
        self.reminder_time = text
        print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {self.reminder_time}")

    def set_repeat_option(self, option):
        self.repeat_option = option
        print(f"–í—ã–±—Ä–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {option}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        days = [
            self.ids.day_mon, self.ids.day_tue, self.ids.day_wed,
            self.ids.day_thu, self.ids.day_fri, self.ids.day_sat, self.ids.day_sun
        ]

        if option == "custom":
            # –í–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω–µ–π
            for btn in days:
                btn.disabled = False
        else:
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω–µ–π
            for btn in days:
                btn.disabled = True
                btn.md_bg_color = (0.5, 0.5, 0.5, 1)  # —Å–µ—Ä—ã–π —Ü–≤–µ—Ç
            self.days_selected = []

    def toggle_day(self, day):
        btn_map = {
            "Mon": self.ids.day_mon,
            "Tue": self.ids.day_tue,
            "Wed": self.ids.day_wed,
            "Thu": self.ids.day_thu,
            "Fri": self.ids.day_fri,
            "Sat": self.ids.day_sat,
            "Sun": self.ids.day_sun,
        }
        btn = btn_map.get(day)

        if not btn:
            return

        if day in self.days_selected:
            self.days_selected.remove(day)
            btn.md_bg_color = (0.5, 0.5, 0.5, 1)  # —Å–µ—Ä—ã–π
            print(f"–î–µ–Ω—å —Å–Ω—è—Ç: {day}")
        else:
            self.days_selected.append(day)
            btn.md_bg_color = self.theme_cls.primary_color  # –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç
            print(f"–î–µ–Ω—å –≤—ã–±—Ä–∞–Ω: {day}")

    def toggle_vibration(self, active):
        self.vibration_enabled = bool(active)
        print(f"–í–∏–±—Ä–∞—Ü–∏—è {'–≤–∫–ª—é—á–µ–Ω–∞' if self.vibration_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")

    def toggle_sound(self, active):
        self.sound_enabled = bool(active)
        print(f"–ó–≤—É–∫ {'–≤–∫–ª—é—á–µ–Ω' if self.sound_enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}")

    def save_settings(self):
        if not self.habit_id:
            print("‚ö† –ù–µ—Ç habit_id, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db.save_reminder(
            habit_id=self.habit_id,
            time=self.reminder_time,
            repeat=self.repeat_option,
            days=self.days_selected,
            vibration=self.vibration_enabled,
            sound=self.sound_enabled,
            text=self.reminder_text
        )
        print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ {self.habit_id}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
        if self.manager and 'habit_add' in self.manager.screen_names:
            self.manager.current = 'habit_add'